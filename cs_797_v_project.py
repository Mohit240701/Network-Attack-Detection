# -*- coding: utf-8 -*-
"""CS 797 V Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ZIy4k-MzaYdvHvk39ZfdC1aANUmRYYl
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import tensorflow as tf
import seaborn as sns
from sklearn.metrics import classification_report

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Dataset_S022Final.csv")

df.dtypes

# Dropped sendTime, sender, reciever, IP_src, port_src, IP_dest, port_dest, Frequency
df=df[['Next_Current_diff','Next_Pre_diff','SNext_Current_diff','SNext_Pre_diff','rcvdPK','duration(ms)','packet_type','droppedPKWrongPort','sentPK','size','channel','DataQueueLen','passedUpPk','rcvdPKFromHL','rcvdPKFromLL','sentDownPK','DropPKByQueue','snir','throughput','label']]
# One hot encoding label
df = pd.get_dummies(df, columns = ['label'])
df.describe()

df.dtypes

df.corr()

sample = df.sample(n=1000, random_state=1)
sns.pairplot(sample[['Next_Current_diff','Next_Pre_diff','SNext_Current_diff','SNext_Pre_diff','rcvdPK']])

sns.pairplot(sample[['duration(ms)','packet_type','droppedPKWrongPort','sentPK','size']])

sns.pairplot(sample[['channel','DataQueueLen','passedUpPk','rcvdPKFromHL','rcvdPKFromLL']])

sns.pairplot(sample[['sentDownPK','DropPKByQueue','snir','throughput']])

sns.heatmap(df.corr())

X = df.drop(columns = ['label_BROUILLAGE_Trafic','label_DDOS_UDP_FLOOD','label_Normal','label_PLUIES_ET_ORAGES'])
y = df[['label_BROUILLAGE_Trafic','label_DDOS_UDP_FLOOD','label_Normal','label_PLUIES_ET_ORAGES']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Conv1D(filters = 32, kernel_size = 3, activation='relu', input_shape=(19, 1)))
model.add(tf.keras.layers.MaxPooling1D(2))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(4, activation='softmax'))

model.summary()

tf.keras.utils.plot_model(model, to_file="cnn_model.png", show_shapes=True)

model.compile(optimizer='adam',
              loss=tf.keras.losses.CategoricalCrossentropy(),
              metrics=['accuracy'])

history = model.fit(X_train,
                    y_train,
                    epochs=5,
                    validation_data=(X_valid, y_valid)
                    )

y_predict = model.predict(X_test)
for j in range(len(y_predict)):
  curr_row = y_predict[j][:]
  max_val = max(curr_row)
  max_loc = np.where(curr_row == max_val)[0]
  for k in range(len(curr_row)):
    y_predict[j][k] = 0
  y_predict[j][max_loc] = 1

print(classification_report(y_test, y_predict, target_names =['label_BROUILLAGE_Trafic','label_DDOS_UDP_FLOOD','label_Normal','label_PLUIES_ET_ORAGES']))

model.save('CNN_Classification.keras')